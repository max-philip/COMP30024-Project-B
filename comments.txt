Artificial Intelligence (COMP30024) Part B CommentsMax Philip (836472)Myles Adams (761125)Our Player class is located in the player.py file.Search Strategy:Our search strategy uses the minimax algorithm with alpha beta pruning.  This method enabled us to ‘search’ deeper into the future moves at an effective runtime and without using significant amount of memory.We ran our minimax algorithm with a consistent depth of 2, a result of testing our solution with various combinations of depths. We had tried variations in which our placement strategy would use a higher depth than our moving strategy, however we found that a lower depth actually worked better in terms of gameplay, not just efficiency. This is because the lower depth search enabled our solution to prioritise ‘clumping’ in the early stages of the game when the opponent’s strategy revolved around reaching board shrinking stages. The higher depth search made our algorithm better at eliminating enemy pieces in the placement stage, however after testing against opponents that aimed to stretch the game long, clumping proved to vastly improve our win rate. If our opponent plays defensively, our solution is designed to, if possible, create a unkillable block of pieces and dominate the centre of the board. Once the board shrinks, we would hold the majority of the pieces and our minimax algorithm would proceed to close out the game.In our search strategy we also remove any positions from the search space that can be easily killed in the next turn, ensuring the longevity of our pieces in the placement stage.  A similar strategy was used in our heuristic for the movement stage.Evaluation Function:Firstly, each position on the board has a defined value associated with it, as different spots have different effectiveness.  We adapted our inherent positional from the evaluation array of a Queen in chess, with a few exceptions (starting constraints, corners etc).  We determined the optimal adaptations to our evaluation array through testing automated variations of evaluation arrays, finding the evaluations that produced the best average result, and incorporating them into our solution.The difference in the number of player pieces and opponent pieces has the highest weighting by far in our minimax heuristic. This had the benefit of both prioritising the elimination of nearby enemy pieces, as well as a focus on self-preservation. Beyond the piece difference, our heuristic employs a tiered evaluation of each board state, using Euclidean distance and evaluation arrays.We established early on that it is critical to control the middle of the board, especially during the movement phase. As are result we changed the evaluation function by adding a simple Euclidean distance measure to prioritize the movement of pieces closer to the centre of the board.  As a direct flow on effect, we create a ‘clumped’ formation.  This is highly sought after the internal pieces protect the pieces on the outside. Once we have got control on the middle pieces, it is almost impossible for the other player to beat us. Since we have a composite heuristic function, our solution is relatively versatile in that it either matches an aggressive opponent that attempts to eliminate pieces early on in the placement stage or mirrors an opponent that attempts to set up it’s own block of pieces (whilst eliminating enemies that move too close to our controlling block).